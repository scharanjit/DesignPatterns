Parameters and local variables are allocated on the stack
(with reference types the object lives on the heap and
a variable references that object).
The stack typically lives at the upper end of your address space
and as it is used up it heads towards the bottom of the address
space (i.e. towards zero).

Your process also has a heap, which lives at the bottom end of your
process. As you allocate memory, this heap can grow towards the upper
end of your address space. As you can see, there is a potential for
the heap to "collide" with the stack (a bit like tectonic plates!!!).

The common cause for a stack overflow is a bad recursive call. Typically,
this is caused when your recursive functions doesn't have the correct
termination condition, so it ends up calling itself forever. However,
with GUI programming, it's possible to generate indirect recursion.
For example, your app may be handling paint messages, and, whilst
processing them, it may call a function that causes the system to
send another paint message. Here you've not explicitly called yourself,
but the OS/VM has done it for you.

To deal with them you'll need to examine your code. If you've got
functions that call themselves then check that you've got a terminating
condition. If you have then check than when calling the function you have
at least modified one of the arguments, otherwise there'll be no visible
change for the recursively called function and the terminating condition
is useless.

If you've got no obvious recursive functions then check to see if you're
calling any library functions that indirectly will cause your function to
be called (like the implicit case above).

int foo(){
     // more stuff
     foo();
}