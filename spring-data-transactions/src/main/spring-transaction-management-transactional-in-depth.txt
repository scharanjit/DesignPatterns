Introduction : -
 >> @Transactional (Declarative Transaction Management) vs Programmatic Transaction Management.

 >> Physical vs Logical transactions.

 >> Spring @Transactional and JPA / Hibernate integration.

 >> Spring @Transactional and Spring Boot or Spring MVC integration.

 >> Rollbacks, Proxies, Common Pitfalls and much more.


  A ) How plain JDBC Transaction Management works?

 import java.sql.Connection;

Connection connection = dataSource.getConnection(); // (1)

try (connection) {
    connection.setAutoCommit(false); // (2)
    // execute some SQL statements...
    connection.commit(); // (3)

} catch (SQLException e) {
    connection.rollback(); // (4)
}


1.) You need a connection to the database to start transactions.
DriverManager.getConnection(url, user, password) would work as well,
though in most enterprise-y applications you will have a data source
configured and get connections from that.

2.) This is the only way to start a database transaction in Java,
even though the name might sound a bit off.
setAutoCommit(true) wraps every single SQL statement in its own transaction
and setAutoCommit(false) is the opposite: You are the master of the transaction.

3.) Let’s commit our transaction…​

4.) Or, rollback our changes, if there was an exception.


Or these 4 lines are replaced by @Transactional in Spring


B.) How to use Spring’s Programmatic Transaction Management?

@Service
public class UserService {

    @Autowired
    private TransactionTemplate template;

    public Long registerUser(User user) {
        Long id = template.execute(status ->  {
            // execute some SQL that e.g.
            // inserts the user into the db and returns the autogenerated id
            return id;
        });
    }
}

C.) How to use Spring’s XML Declarative Transaction Management?
All configuration in xml

D.) How to use Spring’s @Transactional annotation ( Declarative Transaction Management )

public class UserService {

    @Transactional
    public Long registerUser(User user) {
       // execute some SQL that e.g.
        // inserts the user into the db and retrieves the autogenerated id
        // userDao.save(user);
        return id;
    }
}


No XML and no extra code of transaction management


Just make sure @EnableTransactionManagement in enabled (Spring boot it is automatically)

@Transactional(value= "ABCTransactionManager")

 <bean id="ABCTransactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="ABCSessionFactory"/>
        <property name="defaultTimeout" value="${LIS.transactionTimeout}"/>
    </bean>


 public class HibernateTransactionManager extends AbstractPlatformTransactionManager
 		implements ResourceTransactionManager, BeanFactoryAware, InitializingBean


<bean id="LISSessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="ABCDataSource"/>
        <property name="packagesToScan" value="com.org.abc"/>
        <property name="entityInterceptor" ref="LISEntityInterceptor"/>
        <property name="entityTypeFilters" ref="nonHistoryEntitiesFilter"/>
        <property name="mappingResources">
            <list>
                <value>
                ABC-queries.hbm.xml
                </value>
            </list>
        </property>

        <property name="hibernateProperties" ref="ABCHibernateProperties"/>
    </bean>


    public class LocalSessionFactoryBean extends HibernateExceptionTranslator
    		implements FactoryBean<SessionFactory>, ResourceLoaderAware, InitializingBean, DisposableBean {



 E.) @Transactional under the covers

  Spring cannot really rewrite your Java class to insert the connection code.


  But Spring has an advantage. At its core, it is an IoC container.
  It instantiates a ABCService for you and makes sure to autowire that
  ABCService into any other bean that needs a ABCService.

  Now whenever you are using @Transactional on a bean,
  Spring uses a tiny trick.
  It does not just instantiate a ABCService,
  but also a transactional proxy of that ABCService.

  Check Transactional-proxy.png

  F.) Quick Exam
      
      Have a look at the following source code and tell me what
       type of UserService Spring automatically constructs,
        assuming it is marked with @Transactional or has a @Transactional method.
      
      @Configuration
      @EnableTransactionManagement
      public static class MyAppConfig {
      
          @Bean
          public UserService userService() {  // (1)
              return new UserService();
          }
      }
      Correct. Spring constructs a dynamic CGLib proxy of your
       UserService class here that can open and close database 
       transactions for you. You or any other beans won’t even notice
        that it is not your UserService, but a proxy wrapping your UserService.


  F.) For what do you need a Transaction Manager (like PlatformTransactionManager)?

  Your UserService gets proxied on the fly, and the proxy manages
  transactions for you. But it is not the proxy itself handling all this
  transactional state (open, commit, close), the proxy delegates that work to a
  transaction manager.

  Spring offers you a PlatformTransactionManager / TransactionManager
  interface, which, by default, comes with a couple of handy implementations.
  One of them is the datasource transaction manager.

  To sum things up:

  1.) If Spring detects the @Transactional annotation on a bean,
   it creates a dynamic proxy of that bean.

  2.) The proxy has access to a transaction manager and will ask it
  to open and close transactions / connections.

  3.) The transaction manager itself will simply do what you did in
  the plain Java section: Manage a good, old JDBC connection.


  G.) What is the difference between physical and logical transactions? (Very important)



