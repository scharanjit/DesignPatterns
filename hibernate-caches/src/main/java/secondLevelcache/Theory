Second level cache is created in session factory scope
and is available to be used in all sessions which are created
using that particular session factory.

eHCache is example of 2nd level cache

It also means that once session factory is closed,
 all cache associated with it die and cache manager also closed down.

 How second level cache works?

 Whenever hibernate session try to load an entity,
 the very first place it look for cached copy of entity
 in first level cache (associated with particular hibernate session).

 If cached copy of entity is present in first level cache,
 it is returned as result of load method.

 If there is no cached entity in first level cache, then second
  level cache is looked up for cached entity.

 If second level cache has cached entity, it is returned as result
 of load method. But, before returning the entity, it is stored
 in first level cache also so that next invocation to load method
 for entity will return the entity from first level cache itself,
  and there will not be need to go to second level cache again.

 If entity is not found in first level cache and second level
 cache also, then database query is executed and entity is stored
  in both cache levels, before returning as response of load() method.

 Second level cache validate itself for modified entities, i
 f modification has been done through hibernate session APIs.

 If some user or process make changes directly in database,
 the there is no way that second level cache update itself
 until “timeToLiveSeconds” duration has passed for that cache
 region. In this case, it is good idea to invalidate whole cache
 and let hibernate build its cache once again.