static members belong to the class instead of a specific instance.

It means that only one instance of a static field exists[1] even if
you create a million instances of the class or you don't create any.
It will be shared by all instances.

Since static methods also do not belong to a specific instance,
 they can't refer to instance members (how would you know which
 instance Hello class you want to refer to?). static members can
 only refer to static members. Instance members can, of course access
 static members.

Side note: Of course, static members can access instance members
through an object reference.

Example:

public class Example {
    private static boolean staticField;
    private boolean instanceField;
    public static void main(String[] args) {
        // a static method can access static fields
        staticField = true;

        // a static method can access instance fields through an object reference
        Example instance = new Example();
        instance.instanceField = true;
    }
[1]:
Depending on the runtime characteristics, it can
be one per ClassLoader or AppDomain or thread, but that is beside the point.

